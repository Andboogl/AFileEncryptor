# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import json
from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, language):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(781, 311)
        MainWindow.setWindowFlags(QtCore.Qt.WindowType.FramelessWindowHint)
        # MainWindow.resize(781, 311)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 781, 311))
        self.frame.setStyleSheet("background: rgb(128, 128, 128); border-radius: 1px;")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setGeometry(QtCore.QRect(310, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setStyleSheet("color: black;")
        self.label.setObjectName("label")
        self.close = QtWidgets.QPushButton(parent=self.frame)
        self.close.setGeometry(QtCore.QRect(10, 10, 31, 32))
        self.close.setText("")
        self.close.setCursor(QtCore.Qt.CursorShape.PointingHandCursor)
        self.close.setStyleSheet("background-color: rgb(128, 128, 128); border-radius: 5px;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/close.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.close.setIcon(icon)
        self.close.setIconSize(QtCore.QSize(16, 16))
        self.close.setObjectName("pushButton")
        self.roll_up = QtWidgets.QPushButton(parent=self.frame)
        self.roll_up.setGeometry(QtCore.QRect(40, 10, 21, 32))
        self.roll_up.setText("")
        self.roll_up.setCursor(QtCore.Qt.CursorShape.PointingHandCursor)
        self.roll_up.setStyleSheet("background-color: rgb(128, 128, 128); border-radius: 5px;")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/roll_up.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.roll_up.setIcon(icon1)
        self.roll_up.setIconSize(QtCore.QSize(16, 16))
        self.roll_up.setObjectName("pushButton_2")
        self.to_encrypt = QtWidgets.QLineEdit(parent=self.frame)
        self.to_encrypt.setGeometry(QtCore.QRect(10, 60, 371, 51))
        self.to_encrypt.setStyleSheet("color: black;\n"
"background-color: rgb(254, 254, 254);\n"
"border-radius: 20px;\n"
"padding-left: 10px;")
        self.to_encrypt.setText("")
        self.to_encrypt.setReadOnly(True)
        self.to_encrypt.setObjectName("to_encrypt")
        self.to_decrypt = QtWidgets.QLineEdit(parent=self.frame)
        self.to_decrypt.setGeometry(QtCore.QRect(10, 120, 371, 51))
        self.to_decrypt.setStyleSheet("color: black;\n"
"background-color: rgb(254, 254, 254);\n"
"border-radius: 20px;\n"
"padding-left: 10px;")
        self.to_decrypt.setText("")
        self.to_decrypt.setReadOnly(True)
        self.to_decrypt.setObjectName("to_decrypt")
        self.where_result = QtWidgets.QLineEdit(parent=self.frame)
        self.where_result.setGeometry(QtCore.QRect(10, 180, 371, 51))
        self.where_result.setStyleSheet("color: black;\n"
"background-color: rgb(254, 254, 254);\n"
"border-radius: 20px;\n"
"padding-left: 10px;")
        self.where_result.setText("")
        self.where_result.setReadOnly(True)
        self.where_result.setObjectName("where_result")
        self.chose_to_encrypt = QtWidgets.QPushButton(parent=self.frame)
        self.chose_to_encrypt.setGeometry(QtCore.QRect(390, 60, 181, 51))
        self.chose_to_encrypt.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.chose_to_encrypt.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: rgb(193, 193, 193);\n"
"    border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(162, 162, 162);\n"
"}")
        self.chose_to_encrypt.setObjectName("chose_to_encrypt")
        self.chose_to_decrypt = QtWidgets.QPushButton(parent=self.frame)
        self.chose_to_decrypt.setGeometry(QtCore.QRect(390, 120, 181, 51))
        self.chose_to_decrypt.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.chose_to_decrypt.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: rgb(193, 193, 193);\n"
"    border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(162, 162, 162);\n"
"}")
        self.chose_to_decrypt.setObjectName("chose_to_decrypt")
        self.set_default = QtWidgets.QPushButton(parent=self.frame)
        self.set_default.setGeometry(QtCore.QRect(390, 180, 181, 51))
        self.set_default.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.set_default.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: rgb(193, 193, 193);\n"
"    border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(162, 162, 162);\n"
"}")
        self.set_default.setObjectName("set_default")
        font = QtGui.QFont()
        font.setPointSize(10) if language == 'ua' else font.setPointSize(13)
        self.set_default.setFont(font)

        self.chose_where_result = QtWidgets.QPushButton(parent=self.frame)
        self.chose_where_result.setGeometry(QtCore.QRect(580, 180, 181, 51))
        self.chose_where_result.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.chose_where_result.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: rgb(193, 193, 193);\n"
"    border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(162, 162, 162);\n"
"}")
        self.chose_where_result.setObjectName("chose_where_result")
        self.encrypt = QtWidgets.QPushButton(parent=self.frame)
        self.encrypt.setGeometry(QtCore.QRect(10, 240, 371, 51))
        self.encrypt.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.encrypt.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: rgb(193, 193, 193);\n"
"    border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(162, 162, 162);\n"
"}")
        self.encrypt.setObjectName("encrypt")
        self.decrypt = QtWidgets.QPushButton(parent=self.frame)
        self.decrypt.setGeometry(QtCore.QRect(390, 240, 371, 51))
        self.decrypt.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.decrypt.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: rgb(193, 193, 193);\n"
"    border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(162, 162, 162);\n"
"}")
        self.decrypt.setObjectName("decrypt")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow, language)
        self.createMenuBar(MainWindow, language)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def createMenuBar(self, MainWindow: QtWidgets.QMainWindow, lang):
        with open('design/translation/translation.json') as translation_file:
            translate = json.load(translation_file)
            en = translate['en']
            ua = translate['ua']

        menuBar = QtWidgets.QMenuBar(MainWindow)
        lang_menu = QtWidgets.QMenu(f'{en['lang_menu'] if lang == 'en' else ua['lang_menu']}', MainWindow)
        self.english_language = QtGui.QAction('English', lang_menu)
        self.ukrainian_language = QtGui.QAction('Українська', lang_menu)
        lang_menu.addAction(self.english_language)
        lang_menu.addAction(self.ukrainian_language)
        menuBar.addMenu(lang_menu)
        MainWindow.setMenuBar(menuBar)

    def retranslateUi(self, MainWindow, lang: str):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AFileEncryptor"))
        with open('design/translation/translation.json') as translation_file:
            translate = json.load(translation_file)
            en = translate['en']
            ua = translate['ua']

        self.label.setText(_translate("MainWindow", "AFileEncryptor"))
        self.to_encrypt.setPlaceholderText(_translate("MainWindow", en['to_encrypt'] if lang == 'en' else ua['to_encrypt']))
        self.to_decrypt.setPlaceholderText(_translate("MainWindow", en['to_decrypt'] if lang == 'en' else ua['to_decrypt']))
        self.where_result.setPlaceholderText(_translate("MainWindow", en['where_result'] if lang == 'en' else ua['where_result']))
        self.chose_to_encrypt.setText(_translate("MainWindow", en['chose'] if lang == 'en' else ua['chose']))
        self.chose_to_decrypt.setText(_translate("MainWindow", en['chose'] if lang == 'en' else ua['chose']))
        self.set_default.setText(_translate("MainWindow", en['set_default'] if lang == 'en' else ua['set_default']))
        self.chose_where_result.setText(_translate("MainWindow", en['chose'] if lang == 'en' else ua['chose']))
        self.encrypt.setText(_translate("MainWindow", en['encrypt'] if lang == 'en' else ua['encrypt']))
        self.decrypt.setText(_translate("MainWindow", en['decrypt'] if lang == 'en' else ua['decrypt']))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
